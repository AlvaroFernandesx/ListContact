//
//  ListContactCleanViewController.swift
//  ListContact
//
//  Created by Álvaro Fernandes on 23/03/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListContactCleanDisplayLogic: class {
    func startLoading()
    func stopLoading()
    func loadList(viewModel: ListContactCleanViewModel)
    func showError()
}

class ListContactCleanViewController: UITableViewController {
    
    var interactor: ListContactCleanBusinessLogic?
    var router: (NSObjectProtocol & ListContactCleanRoutingLogic & ListContactCleanDataPassing)?
    var viewModel: ListContactCleanViewModel?
    
    lazy var spinner: UIActivityIndicatorView = {
        let activity = UIActivityIndicatorView(style: .medium)
        activity.hidesWhenStopped = true
        return activity
    }()
    
    override func loadView() {
        super.loadView()
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = ListContactCleanInteractor()
        let presenter = ListContactCleanPresenter()
        let router = ListContactCleanRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        self.view.addSubview(spinner)
        configureTable()
        interactor?.load()
    }
    
    func configureTable() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(ContactCell.self, forCellReuseIdentifier: String(describing: ContactCell.self))
        tableView.backgroundView = spinner
    }

}

extension ListContactCleanViewController: ListContactCleanDisplayLogic {
    func startLoading() {
        spinner.startAnimating()
    }
    
    func stopLoading() {
        spinner.stopAnimating()
    }
    
    func loadList(viewModel: ListContactCleanViewModel) {
        self.viewModel = viewModel
        tableView.reloadData()
    }
    
    func showError() {
        let alert = UIAlertController(title: "Desculpe, tivemos um erro", message:"clique no botão abaixo para tentar novamente", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Tentar novamente", style: .default, handler: tryAgain))
        self.present(alert, animated: true)
    }
    
    func tryAgain(alertAction: UIAlertAction) {
        interactor?.load()
    }
}

extension ListContactCleanViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel?.contactList.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: ContactCell.self)) as? ContactCell else {
            return UITableViewCell()
        }
        
        guard let viewModel = viewModel else { return UITableViewCell()}
        cell.configureCell(viewModel.contactList[indexPath.row])

        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if indexPath.row % 2 == 0 {
            let alert = UIAlertController(title: "Você tocou em", message: "\(String(describing: viewModel?.contactList[indexPath.row].name))", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true)
        } else {
            let alert = UIAlertController(title: "Atenção", message:"Você tocou no contato sorteado", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true)
        }
    }
    
}
